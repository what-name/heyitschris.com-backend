---
Parameters:
  # FIXME set input constraints for these
  S3BucketName:
    Description: "The name of the S3 bucket that will store the static website files"
    Type: String
  DynamoDBTableName:
    Description: "The name of the DynamoDB table for the visitor count"
    Type: String
  WebsiteDomainName:
    Description: "The name of the website this stack will be deployed for"
    Type: String
    Default: mydomain.com
    # ConstraintDescription: Only valid domain names
    # AllowedPattern: "\/^[a-zA-Z0-9][a-zA-Z0-9-]{1,61}[a-zA-Z0-9]\\.[a-zA-Z]{2,}$"


Resources:

  # S3
  ## Static site hosting bucket
  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Ref: S3BucketName
      WebsiteConfiguration:
        IndexDocument: index.html
      CorsConfiguration:
        CorsRules:
          - 
            AllowedMethods: 
              - GET
              - HEAD
            AllowedOrigins: 
              - "*"
            AllowedHeaders: 
              - "*"
      Tags:
        - Key: CostCenter
          Value: !Sub "${WebsiteDomainName}"
  
  BlogWebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${S3BucketName}-blog"
      WebsiteConfiguration:
        IndexDocument: index.html
      Tags:
        - Key: CostCenter
          Value: !Sub "${WebsiteDomainName}"

  LogsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join 
        - ''
        - - !Ref WebsiteBucket
          - '-logs'
      Tags:
        - Key: CostCenter
          Value: !Sub "${WebsiteDomainName}"

  ## Bucket policy of the static website hosting bucket
  WebsiteBucketBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: PublicAccessPolicy
          Version: 2012-10-17
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal:
                CanonicalUser: !GetAtt
                  - CloudFrontOAI
                  - S3CanonicalUserId
              Action: 's3:GetObject'
              Resource: !Sub "arn:aws:s3:::${WebsiteBucket}/*"
        Bucket: !Ref WebsiteBucket

  # Bucket policy for the blog website bucket
  BlogWebsiteBucketBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: PublicAccessPolicy
          Version: 2012-10-17
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: "*"
              Action: "s3:GetObject"
              Resource: !Sub "arn:aws:s3:::${BlogWebsiteBucket}/*"
        Bucket: !Ref BlogWebsiteBucket
  
  # CloudFront
  ## CloudFront OAI for the website bucket policy
  CloudFrontOAI:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties: 
      CloudFrontOriginAccessIdentityConfig: 
        Comment: !Join 
          - ''
          - - 'The OAI for the bucket: '
            - !Ref WebsiteBucket

  ## CloudFront OAI for the blog bucket policy
  CloudFrontOAIBlog:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties: 
      CloudFrontOriginAccessIdentityConfig: 
        Comment: !Join 
          - ''
          - - 'The OAI for the bucket: '
            - !Ref BlogWebsiteBucket

  ## Cloudfront distribution
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
        - DomainName: !Join 
            - ''
            - - !Ref WebsiteBucket
              - '.s3.amazonaws.com'
          Id: myS3Origin
          S3OriginConfig:
            OriginAccessIdentity: !Join 
              - ''
              - - 'origin-access-identity/cloudfront/'
                - !Ref CloudFrontOAI
        Enabled: 'true'
        Comment: Static website distribution
        DefaultRootObject: index.html
        # Logging:
        #   IncludeCookies: 'false'
        #   Bucket: !Ref LogsBucket
        #   Prefix: CloudFrontLogs
        
        Aliases:
          - heyitschris.com
        DefaultCacheBehavior:
          AllowedMethods:
            - HEAD
            - GET
            - OPTIONS
          CachedMethods:
            - HEAD
            - GET
            - OPTIONS
          TargetOriginId: myS3Origin
          ForwardedValues:
            QueryString: 'false'
          ViewerProtocolPolicy: redirect-to-https
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn: !Ref DomainCertificate
          SslSupportMethod: sni-only

  ## Blog Cloudfront distribution
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
        - DomainName: !Join 
            - ''
            - - !Ref BlogWebsiteBucket
              - '.s3.amazonaws.com'
          Id: myBlogS3Origin
          S3OriginConfig:
            OriginAccessIdentity: !Join 
              - ''
              - - 'origin-access-identity/cloudfront/'
                - !Ref CloudFrontOAIBlog
        Enabled: 'true'
        Comment: Static blog website distribution
        DefaultRootObject: index.html
        # Logging:
        #   IncludeCookies: 'false'
        #   Bucket: !Ref LogsBucket
        #   Prefix: CloudFrontLogs
        
        Aliases:
          - blog.heyitschris.com
        DefaultCacheBehavior:
          AllowedMethods:
            - HEAD
            - GET
            - OPTIONS
          CachedMethods:
            - HEAD
            - GET
            - OPTIONS
          TargetOriginId: myBlogS3Origin
          ForwardedValues:
            QueryString: 'false'
          ViewerProtocolPolicy: redirect-to-https
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn: !Ref DomainCertificate
          SslSupportMethod: sni-only

  # Visiton Counter Part
  ## DynamoDB Table - FIXME need to manually input item for the first time
  ## FORMAT: id: visitorCount, amount: 0
  DDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: 
        !Ref DynamoDBTableName
      AttributeDefinitions:
        -
          AttributeName: "id"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "id"
          KeyType: "HASH"
      BillingMode: PAY_PER_REQUEST
  
  ## Lambda role to access visitorCount in DynamoDB
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: dynamodbAccessRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DDBTable}"
            - Effect: Allow
              Action:
              - logs:*
              Resource: "*"

  ## Lambda function to retrieve visitorCount from DynamoDB
  VisitorCountLambda:
    Type: AWS::Lambda::Function
    Description: This function retrieves and updates the visitor count in the DynamoDB database.
    Properties:
      Environment:
        Variables:
          databaseName: !Ref DDBTable
      Code:
        ZipFile: |
          import json
          import boto3
          import os

          dynamodb = boto3.resource('dynamodb')
          ddbTableName = os.environ['databaseName']
          table = dynamodb.Table(ddbTableName)

          def handler(event, context):
              ddbResponse = table.update_item(
                  Key={
                      "id": "visitorCount"
                  },
                  UpdateExpression='SET amount = amount + :inc',
                  ExpressionAttributeValues={
                      ':inc': 1
                  },
                  ReturnValues="UPDATED_NEW"
              )
              print("Response visitor count: ", ddbResponse["Attributes"]["amount"])
              responseBody = json.dumps({"visitorCount": int(float(ddbResponse["Attributes"]["amount"]))})
              apiResponse = {
                  "isBase64Encoded": False,
                  "statusCode": 200,
                  "body": responseBody,
                  "headers": {
                      "Access-Control-Allow-Headers" : "Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with",
                      "Access-Control-Allow-Origin": "*",
                      "Access-Control-Allow-Methods": "GET,OPTIONS" 
                  },
              }
              return apiResponse
      Handler: index.handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.6
      MemorySize: 128
      Timeout: 2
      Tags:
        - Key: CostCenter
          Value: !Sub "${WebsiteDomainName}"

  ## API Gateway
  VisitorCounterAPIGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: VisitorCounterAPI
      Description: The API for the Lambda function that retrieves and updates the current visitor count
      EndpointConfiguration:
        Types:
          - REGIONAL
      Tags:
        - Key: CostCenter
          Value: !Sub "${WebsiteDomainName}"

  VisitorCounterAPIGatewayRootMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt VisitorCountLambda.Arn
      ResourceId: !GetAtt VisitorCounterAPIGateway.RootResourceId
      RestApiId: !Ref VisitorCounterAPIGateway

  VisitorCounterAPIGatewayOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref VisitorCounterAPIGateway
      ResourceId: !GetAtt VisitorCounterAPIGateway.RootResourceId
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  VisitorCounterAPIGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - VisitorCounterAPIGatewayRootMethod
    Properties:
      RestApiId: !Ref VisitorCounterAPIGateway
      StageName: prod # not clean, but it'll do now

  VisitorCounterLambdaApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt VisitorCountLambda.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${VisitorCounterAPIGateway}/*/GET/

  #### WARNING
  # This initialization function always fails to create. ignoring and solving it manually for now...
  # InitializeDynamoDB:
  #   Type: Custom::InitFunction
  #   DependsOn: DDBTable
  #   Properties:
  #     ServiceToken: !GetAtt InitFunction.Arn
  #     DynamoTableName: !Ref DDBTable

  # ACM Certificate for heyitschris.com
  DomainCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Sub "*.${WebsiteDomainName}"
      SubjectAlternativeNames:
        - !Ref WebsiteDomainName
        - !Sub "*.${WebsiteDomainName}"
      DomainValidationOptions:
        - DomainName: !Ref WebsiteDomainName
          ValidationDomain: !Ref WebsiteDomainName
      ValidationMethod: EMAIL
      Tags:
        - Key: CostCenter
          Value: !Sub "${WebsiteDomainName}"

  
  # Route53
  ## Custom Hosted Zone
  HostedZone: 
    Type: "AWS::Route53::HostedZone"
    Properties: 
      HostedZoneConfig: 
        Comment: 'Heyitschris.com hosted zone migrated from main account'
      Name: !Ref WebsiteDomainName
      HostedZoneTags: 
        - 
          Key: 'CostCenter'
          Value: !Sub "${WebsiteDomainName}"

  ## The main A record to redirect to the CF distribution
  DNSRecordMain:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Sub "${WebsiteDomainName}"
      Type: A
      HostedZoneId: !Ref HostedZone
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2

  ## Redirect www to the main domain
  DNSRecordMainWWWredirect:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Sub "www.${WebsiteDomainName}"
      Type: A
      HostedZoneId: !Ref HostedZone
      AliasTarget:
        DNSName: !Ref WebsiteDomainName
        HostedZoneId: !Ref HostedZone

  ## APIGateway Alias DNS record
  # DNSRecordAPIGateway:
  #   Type: AWS::Route53::RecordSet
  #   Properties:
  #     HostedZoneId : !Ref HostedZone
  #     Name: !Sub "api.${WebsiteDomainName}"
  #     TTL: 300
  #     ResourceRecords:
  #       - !Sub "https://${VisitorCounterAPIGateway}.execute-api.${AWS::Region}.amazonaws.com/prod"
  #     Type: CNAME

  ## MX Record
  DNSRecordHeyitschrisMX:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId : !Ref HostedZone
      Name: !Ref WebsiteDomainName
      Type: MX
      TTL: 300
      ResourceRecords:
        - "10 aspmx1.migadu.com"
        - "20 aspmx2.migadu.com"

  ## TXT Record for Migadu verification
  DNSRecordHeyitschrisTXT1:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId : !Ref HostedZone
      Name: !Ref WebsiteDomainName
      Type: TXT
      TTL: 300
      ResourceRecords:
        # IMPORTANT the email-verify value is unique, comes from the Migadu account
        - "\"hosted-email-verify=50mksqoi\""
        - "\"v=spf1 include:spf.migadu.com -all\""
  
  ## _Dmarc Record for Migadu verification
  DNSRecordHeyitschrisDmarc:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId : !Ref HostedZone
      Name: !Sub "_dmarc.${WebsiteDomainName}"
      Type: TXT
      TTL: 300
      ResourceRecords:
        - "\"v=DMARC1; p=reject;\""

  ## Domainkey1 Record for Migadu verification
  DNSRecordHeyitschrisDomainKey1:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId : !Ref HostedZone
      Name: !Sub "key1._domainkey.${WebsiteDomainName}"
      Type: CNAME
      TTL: 300
      ResourceRecords:
        - !Sub "key1.${WebsiteDomainName}._domainkey.migadu.com."

  ## Domainkey2 Record for Migadu verification
  DNSRecordHeyitschrisDomainKey2:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId : !Ref HostedZone
      Name: !Sub "key2._domainkey.${WebsiteDomainName}"
      Type: CNAME
      TTL: 300
      ResourceRecords:
        - !Sub "key2.${WebsiteDomainName}._domainkey.migadu.com."

  ## Domainkey3 Record for Migadu verification
  DNSRecordHeyitschrisDomainKey3:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId : !Ref HostedZone
      Name: !Sub "key3._domainkey.${WebsiteDomainName}"
      Type: CNAME
      TTL: 300
      ResourceRecords:
        - !Sub "key3.${WebsiteDomainName}._domainkey.migadu.com."

  ## Imaps Record for Migadu verification
  DNSRecordHeyitschrisImaps:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId : !Ref HostedZone
      Name: !Sub "_imaps._tcp.${WebsiteDomainName}"
      Type: SRV
      TTL: 300
      ResourceRecords:
        - "0 1 993 imap.migadu.com."

  ## SMTP Record for Migadu verification
  DNSRecordHeyitschrisSMTP:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId : !Ref HostedZone
      Name: !Sub "_submissions._tcp.${WebsiteDomainName}"
      Type: SRV
      TTL: 300
      ResourceRecords:
        - "0 1 465 smtp.migadu.com."

  ## Autoconfig Record for Migadu verification
  DNSRecordHeyitschrisAutoconfig:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId : !Ref HostedZone
      Name: !Sub "autoconfig.${WebsiteDomainName}"
      Type: CNAME
      TTL: 300
      ResourceRecords:
        - "autoconfig.migadu.com."

  ## Autodiscover Record for Migadu verification
  DNSRecordHeyitschrisAutoDiscover:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId : !Ref HostedZone
      Name: !Sub "autodiscover.${WebsiteDomainName}"
      Type: CNAME
      TTL: 300
      ResourceRecords:
        - "autodiscover.migadu.com."

Outputs:
  CloudFrontURL:
    Value: !Join 
      - ''
      - - 'https://'
        - !GetAtt 
          - CloudFrontDistribution
          - DomainName
    Description: HTTPS Access point
  apiGatewayInvokeURL:
    Value: !Sub "https://${VisitorCounterAPIGateway}.execute-api.${AWS::Region}.amazonaws.com/prod"