---
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  The backend infrastructure for the heyitschris.com website and blog.

Parameters:
  # FIXME set input constraints for these
  S3BucketName:
    Description: "The name of the S3 bucket that will store the static website files"
    Type: String
  WebsiteDomainName:
    Description: "The name of the website this stack will be deployed for"
    Type: String
    Default: "heyitschris.com"
    # ConstraintDescription: Only valid domain names
    # AllowedPattern: "\/^[a-zA-Z0-9][a-zA-Z0-9-]{1,61}[a-zA-Z0-9]\\.[a-zA-Z]{2,}$"

Globals:
  Function:
    Timeout: 5


Resources:

  # S3
  ## Static site hosting bucket
  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Ref: S3BucketName
      WebsiteConfiguration:
        IndexDocument: index.html
      CorsConfiguration:
        CorsRules:
          - 
            AllowedMethods: 
              - GET
              - HEAD
            AllowedOrigins: 
              - "*"
            AllowedHeaders: 
              - "*"
      Tags:
        - Key: CostCenter
          Value: !Sub "${WebsiteDomainName}"
  
  BlogWebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${S3BucketName}-blog"
      WebsiteConfiguration:
        IndexDocument: index.html
      CorsConfiguration:
        CorsRules:
          - 
            AllowedMethods: 
              - GET
              - HEAD
            AllowedOrigins: 
              - "*"
            AllowedHeaders: 
              - "*"
      Tags:
        - Key: CostCenter
          Value: !Sub "${WebsiteDomainName}"

  LogsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${S3BucketName}-logs"
      Tags:
        - Key: CostCenter
          Value: !Sub "${WebsiteDomainName}"

  ## Bucket policy of the static website hosting bucket
  WebsiteBucketBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: PublicAccessPolicy
          Version: 2012-10-17
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal:
                CanonicalUser: !GetAtt CloudFrontOAI.S3CanonicalUserId
              Action: 's3:GetObject'
              Resource: !Sub "arn:aws:s3:::${WebsiteBucket}/*"
        Bucket: !Ref WebsiteBucket

  # Bucket policy for the blog website bucket
  BlogWebsiteBucketBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: PublicAccessPolicy
          Version: 2012-10-17
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: "*"
              Action: s3:GetObject
              Resource: !Sub "arn:aws:s3:::${BlogWebsiteBucket}/*"
        Bucket: !Ref BlogWebsiteBucket
  
  # CloudFront
  ## CloudFront OAI for the website bucket policy
  CloudFrontOAI:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties: 
      CloudFrontOriginAccessIdentityConfig: 
        Comment: !Sub "The OAI for the bucket: ${S3BucketName}"
            
  ## Cloudfront distribution
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
        - DomainName: !Sub "${S3BucketName}.s3.amazonaws.com"
          Id: myS3Origin
          S3OriginConfig:
            OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CloudFrontOAI}"
        Enabled: 'true'
        Comment: Static main website distribution
        DefaultRootObject: index.html
        Aliases:
          - !Ref WebsiteDomainName
          - !Sub "www.${WebsiteDomainName}"
        DefaultCacheBehavior:
          DefaultTTL: 1800
          MaxTTL: 14400
          Compress: true
          AllowedMethods:
            - HEAD
            - GET
            - OPTIONS
          CachedMethods:
            - HEAD
            - GET
            - OPTIONS
          TargetOriginId: myS3Origin
          ForwardedValues:
            QueryString: 'false'
          ViewerProtocolPolicy: redirect-to-https
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn: !Ref DomainCertificate
          SslSupportMethod: sni-only

  ## Blog Cloudfront distribution
  BlogCloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
        - Id: !Sub "${BlogWebsiteBucket}-origin"
          CustomOriginConfig: 
            OriginProtocolPolicy: http-only
            HTTPPort: 80
            OriginSSLProtocols: 
              - TLSv1
              - TLSv1.1
              - TLSv1.2
            HTTPSPort: 443
          DomainName: !Sub "${S3BucketName}-blog.s3-website-${AWS::Region}.amazonaws.com"
        Enabled: 'true'
        Comment: Static blog website distribution
        DefaultRootObject: index.html
        Aliases:
          - !Sub "blog.${WebsiteDomainName}"
        DefaultCacheBehavior:
          DefaultTTL: 1800
          MaxTTL: 14400
          Compress: true
          AllowedMethods:
            - HEAD
            - GET
          CachedMethods:
            - HEAD
            - GET
          TargetOriginId: !Sub "${BlogWebsiteBucket}-origin"
          ForwardedValues:
            QueryString: 'false'
          ViewerProtocolPolicy: redirect-to-https
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn: !Ref DomainCertificate
          SslSupportMethod: sni-only

  DDBTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
      Tags:
        CostCenter: !Ref WebsiteDomainName
  
  ## Lambda role to access visitorCount in DynamoDB
  VisitorCounterFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: dynamodbAccessRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DDBTable}"
            - Effect: Allow
              Action:
              - logs:*
              Resource: "*"

  ## Lambda function to retrieve visitorCount from DynamoDB
  VisitorCounterFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: VisitorCounter/
      Handler: visitorCounterLambda.handler
      Runtime: python3.8
      Role: !GetAtt VisitorCounterFunctionRole.Arn
      Environment:
          Variables: 
            databaseName : !Ref DDBTable
      Events:
        VisitorCounter:
          Type: Api 
          Properties:
            Path: /visitorCount
            Method: get
      Tags:
        CostCenter: !Ref WebsiteDomainName

  # ServerlessRestApiUsagePlan:
  #   Type: AWS::ApiGateway::UsagePlan
  #   Properties:
  #     ApiStages:
  #       - ApiId: !Ref ServerlessRestApi
  #         Stage: !Ref Prod
  #     Description: Usage plan of visitor counter API
  #     Throttle:
  #       BurstLimit: 100
  #       RateLimit: 50
  #     UsagePlanName: VisitorCounterLimiter

  # ACM Certificate for heyitschris.com
  DomainCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Sub "*.${WebsiteDomainName}"
      SubjectAlternativeNames:
        - !Ref WebsiteDomainName
        - !Sub "*.${WebsiteDomainName}"
      DomainValidationOptions:
        - DomainName: !Ref WebsiteDomainName
          ValidationDomain: !Ref WebsiteDomainName
      ValidationMethod: EMAIL
      Tags:
        - Key: CostCenter
          Value: !Sub "${WebsiteDomainName}"

  
  # Route53
  ## Custom Hosted Zone
  HostedZone: 
    Type: "AWS::Route53::HostedZone"
    Properties: 
      HostedZoneConfig: 
        Comment: 'Heyitschris.com hosted zone migrated from main account'
      Name: !Ref WebsiteDomainName
      HostedZoneTags: 
        - 
          Key: 'CostCenter'
          Value: !Sub "${WebsiteDomainName}"

  ## The main A record to redirect to the CF distribution
  DNSRecordMain:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Sub "${WebsiteDomainName}"
      Type: A
      HostedZoneId: !Ref HostedZone
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2

  ## The A record to redirect to the blog
  DNSRecordBlog:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Sub "blog.${WebsiteDomainName}"
      Type: A
      HostedZoneId: !Ref HostedZone
      AliasTarget:
        DNSName: !GetAtt BlogCloudFrontDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2
    
  ## DNS Record for my Hashnode blog
  DNSRecordHeyitschrisDomainKey1:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId : !Ref HostedZone
      Name: !Sub not-blog.${WebsiteDomainName}
      Type: CNAME
      TTL: 300
      ResourceRecords:
        - hashnode.network

  ## Redirect www to the main domain
  DNSRecordMainWWWredirect:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Sub "www.${WebsiteDomainName}"
      Type: A
      HostedZoneId: !Ref HostedZone
      AliasTarget:
        DNSName: !Ref WebsiteDomainName
        HostedZoneId: !Ref HostedZone

  ## APIGateway Alias DNS record
  # DNSRecordAPIGateway:
  #   Type: AWS::Route53::RecordSet
  #   Properties:
  #     HostedZoneId : !Ref HostedZone
  #     Name: !Sub "api.${WebsiteDomainName}"
  #     TTL: 300
  #     ResourceRecords:
  #       - !Sub "https://${VisitorCounterAPIGateway}.execute-api.${AWS::Region}.amazonaws.com/prod"
  #     Type: CNAME

  ## MX Record
  DNSRecordHeyitschrisMX:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId : !Ref HostedZone
      Name: !Ref WebsiteDomainName
      Type: MX
      TTL: 300
      ResourceRecords:
        - "10 aspmx1.migadu.com"
        - "20 aspmx2.migadu.com"

  ## TXT Record for Migadu verification
  DNSRecordHeyitschrisTXT1:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId : !Ref HostedZone
      Name: !Ref WebsiteDomainName
      Type: TXT
      TTL: 300
      ResourceRecords:
        # IMPORTANT the email-verify value is unique, comes from the Migadu account
        - "\"hosted-email-verify=50mksqoi\""
        - "\"v=spf1 include:spf.migadu.com -all\""
  
  ## _Dmarc Record for Migadu verification
  DNSRecordHeyitschrisDmarc:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId : !Ref HostedZone
      Name: !Sub "_dmarc.${WebsiteDomainName}"
      Type: TXT
      TTL: 300
      ResourceRecords:
        - "\"v=DMARC1; p=reject;\""

  ## Domainkey1 Record for Migadu verification
  DNSRecordHeyitschrisDomainKey1:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId : !Ref HostedZone
      Name: !Sub "key1._domainkey.${WebsiteDomainName}"
      Type: CNAME
      TTL: 300
      ResourceRecords:
        - !Sub "key1.${WebsiteDomainName}._domainkey.migadu.com."

  ## Domainkey2 Record for Migadu verification
  DNSRecordHeyitschrisDomainKey2:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId : !Ref HostedZone
      Name: !Sub "key2._domainkey.${WebsiteDomainName}"
      Type: CNAME
      TTL: 300
      ResourceRecords:
        - !Sub "key2.${WebsiteDomainName}._domainkey.migadu.com."

  ## Domainkey3 Record for Migadu verification
  DNSRecordHeyitschrisDomainKey3:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId : !Ref HostedZone
      Name: !Sub "key3._domainkey.${WebsiteDomainName}"
      Type: CNAME
      TTL: 300
      ResourceRecords:
        - !Sub "key3.${WebsiteDomainName}._domainkey.migadu.com."

  ## Imaps Record for Migadu verification
  DNSRecordHeyitschrisImaps:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId : !Ref HostedZone
      Name: !Sub "_imaps._tcp.${WebsiteDomainName}"
      Type: SRV
      TTL: 300
      ResourceRecords:
        - "0 1 993 imap.migadu.com."

  ## SMTP Record for Migadu verification
  DNSRecordHeyitschrisSMTP:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId : !Ref HostedZone
      Name: !Sub "_submissions._tcp.${WebsiteDomainName}"
      Type: SRV
      TTL: 300
      ResourceRecords:
        - "0 1 465 smtp.migadu.com."

  ## Autoconfig Record for Migadu verification
  DNSRecordHeyitschrisAutoconfig:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId : !Ref HostedZone
      Name: !Sub "autoconfig.${WebsiteDomainName}"
      Type: CNAME
      TTL: 300
      ResourceRecords:
        - "autoconfig.migadu.com."

  ## Autodiscover Record for Migadu verification
  DNSRecordHeyitschrisAutoDiscover:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId : !Ref HostedZone
      Name: !Sub "autodiscover.${WebsiteDomainName}"
      Type: CNAME
      TTL: 300
      ResourceRecords:
        - "autodiscover.migadu.com."

Outputs:
  CloudFrontBlogURL:
    Value: !Sub "https://${BlogCloudFrontDistribution.DomainName}"
    Description: Blog HTTPS Access point
  VisitorCounterApiEndpoint:
    Description: "API Gateway endpoint URL for Prod stage for visitorCounter function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/visitorCount/"